(:main
	(:main 
		// Hops through 3 nested functions each performing a single arithmetic operation (+,&,-) to a 5-element array. Each function prints the array after its respective operation.
		
		0 1
		rdi <- 11
		rsi <- 7
		call allocate 2
		mem rax 8 <- 19
		mem rax 16 <- 7
		mem rax 24 <- 21
		mem rax 32 <- 25
		mem rax 40 <- 15
		rdi <- rax
		mem rsp 0 <- rdi 
		call print 1
		rdi <- mem rsp 0
		mem rsp -8 <- :ret_add
		call :add 1
		
		:ret_add
		return
	)

	(:add
	  	1 1
	  	rsi <- 1
	  	mem rsp 0 <- rdi
	  	mem rsp -8 <- :ret_opadd
	  	call :operation 2

	  	:ret_opadd
	  	rdi <- mem rsp 0
		mem rsp -8 <- :ret_and
		call :and 1

		:ret_and
		return
	)

	(:and
	  	1 1
	  	rsi <- 3
	  	mem rsp 0 <- rdi
	  	mem rsp -8 <- :ret_opand
	  	call :operation 2

	  	:ret_opand
	  	rdi <- mem rsp 0
		mem rsp -8 <- :ret_sub
		call :sub 1

		:ret_sub
		return
	)

	(:sub
	  	1 0
	  	rsi <- 5
	  	mem rsp -8 <- :ret_opsub
	  	call :operation 2

	  	:ret_opsub
		return
	)

	(:operation
	  	2 1
	  	rax <- rdi
	 	rax +=8
	 	rdx <-1
	 	goto :start_op

	 	:start_op
	 	cjump 11 < rdx :print
	 	cjump rsi = 1 :add_op
	 	cjump rsi = 3 :and_op
	 	cjump rsi = 5 :sub_op
	 	goto :ret_op

	 	:add_op
		mem rax 0 += 22
		goto :ret_op

		:sub_op
		mem rax 0 -= 18
		goto :ret_op

		:and_op
		mem rax 0 &= 39
		goto :ret_op

		:ret_op
		rax +=8
	 	rdx +=2
		goto :start_op

		:print
		mem rsp 0 <- rdi 
		call print 1
		rdi <- mem rsp 0
		return
	)
)