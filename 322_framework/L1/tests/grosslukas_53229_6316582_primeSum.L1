(:go
  (:go 0 0
     rdi <- 10
     rsi <- 100
     mem rsp -8 <- :sum_ret
     call :primeSum 2
   :sum_ret
     rdi <- rax
     rdi <<= 1
     rdi += 1
     call print 1
     return
  )

  (:primeSum 0 3 // Sum of primes from rdi to rsi
     mem rsp 0 <- r12      // Save registers
     mem rsp 8 <- r13
     r12 <- rsi            // End of range
     r13 <- 0              // Running sum
   :loop1
     cjump r12 < rdi :done1
     mem rsp 16 <- rdi
     mem rsp -8 <- :is_prime_ret
     call :is_prime 1
   :is_prime_ret
     rdi <- mem rsp 16
     cjump rax = 1 :prime
     goto :inc
   :prime
     r13 += rdi
   :inc
     rdi += 1
     goto :loop1

   :done1
     rax <- r13
     r12 <- mem rsp 0      // Restore registers
     r13 <- mem rsp 8
     return
  )
  (:is_prime 1 2
     cjump rdi = 1 :false
     rsi <- 2              // Loop variable (i)
   :loop2
     rdx <- rsi
     rdx *= rdx
     cjump rdi < rdx :true // When i^2 > input
     mem rsp 0 <- rdi
     mem rsp 8 <- rsi
     mem rsp -8 <- :mod_ret
     call :modulo 2
   :mod_ret
     rdi <- mem rsp 0
     rsi <- mem rsp 8
     cjump rax = 0 :false  // If input % i == 0, not prime
     rsi += 1
     goto :loop2

   :true
     rax <- 1
     goto :done2
   :false
     rax <- 0
     goto :done2
   :done2
     return
  )

  (:modulo 2 0 // rdi % rsi
   :loop3
     cjump rdi < rsi :done3
     rdi -= rsi
     goto :loop3
   :done3
     rax <- rdi
     return
  )
)
