(:main
    (:main
        0 2
        r10 <- 15
        rdi <- r10          //number of elements
        rsi <- 1            // initial value

        //save r10 across the call
        mem rsp 0 <- r10
        call allocate 2
        r10 <- mem rsp 0

        rdi <- rax          //print out array initially
        mem rsp 8 <- r10
        mem rsp 0 <- rax
        call print 1
        r10 <- mem rsp 8

        rax <- mem rsp 0
        rdi <- rax          //pointer to the array
        rsi <- r10          //number of elements

        mem rsp 0 <- rax    //save the starting address of the array
        mem rsp -8 <- :traverse_and_incr_ret
        call :traverse_and_incr 2
        :traverse_and_incr_ret
        rax <- mem rsp 0
        rdi <- 7                // 3 encoded
        rsi <- rax
        mem rsp -8 <- :sum_prior_ret
        call :sum_prior 1
        :sum_prior_ret
        rdi <- rax
        call print 1

        return
    )

    (:traverse_and_incr
        2 0
        //rdi is the pointer to the start
        //rsi is the number of elements (encoded)
        rcx <- rdi

        r10 <- 1 //0 encoded
        :check
            cjump r10 <= rsi :loop :end
        :loop
            rcx += 8            //move pointer to next element
            rax <- mem rcx 0    //get the value of the element
            r10 += 2            //increment the counter by 1 encoded
            rax += 2            //increment the value at the element
            mem rcx 0 <- rax    //store the new value back
            goto :check
        :end
        call print 1
        return

    )

    (:sum_prior
        2 1
        //rdi is the index to stop at
        //rsi is the pointer to the array
        r10 <- 0        //loop index
        rax <- 1

        :check_sum
            cjump r10 <= rdi :loop_sum :end_sum
        :loop_sum
            rdx @ rsi r10 8
            r8 <- mem rdx 0
            //decode value as number
            r8 >>= 1
            rax += r8
            r10 += 2


            goto :check_sum
        :end_sum
            rdi <- rsi
            mem rsp 0 <- rax
            r8 <- rsi
            r8 += 24
            mem r8 0 <- rax
            //mem r8 24 <- rax
            call print 1
            rax <- mem rsp 0
            return
    )


)
