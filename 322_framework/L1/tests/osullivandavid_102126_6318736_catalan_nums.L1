//Geerates the first n catalan numbers 

(:main
	(:main
		0 0
		mem rsp -8 <- :exit_program
		
		//----NUMBER OF CATALAN NUMBERS TO GENERATE (UNENCODED VALUE)-----:
						rdi <- 15
		//---------------------------------------------------------------
		
		rdi <<= 1 //encode rdi
		rdi++
		call :find_first_n_catalans 1
		:exit_program
		return
	)
	(:find_first_n_catalans //finds the first n catalans (n >= 1)
		//rdi is n (encoded)
		1 3
		rdi >>= 1 //decode n

		//save callee saved registers
		mem rsp 0 <- r12
		mem rsp 8 <- r13
		mem rsp 16 <- r14

		r12 <- rdi //store n in r12
		r13 <- 0 //r13 as a counter
		
		r14 <- 1 //the first catalan number (C_0) is 1

		:find_first_loop
			cjump r12 <= r13 :end_find_first_n_catalans //keep looping until !(n <= i), that is while i < n
			rdi <- r14 //put catalan number in rdi to print
			
			//encode rdi to print
			rdi <<= 1
			rdi++
			call print 1
			mem rsp -8 <- :ret_find_nth
			rdi <- r14 //put catalan number in rdi to calculate next one
			rsi <- r13
			call :find_nth_catalan 2
			:ret_find_nth
			r14 <- rax //store catalan number in r14
			r13++ //increase n counter
		goto :find_first_loop


		:end_find_first_n_catalans
		//restore callee saved registers
		r12 <- mem rsp 0
		r13 <- mem rsp 8
		r14 <- mem rsp 16
		return
	)
	(:find_nth_catalan //finds the nth catalan number (unencoded) based off of recurence relation C_n+1 = 2*(2n+1)/n+2 *C_n  
		//rdi is the previous catalan number (unencoded)
		//rsi is n (unencoded)
		2 0
		
		r10 <- rsi //put n in r10
		r10 *= 2 //rsi = 2n
		r10 += 1 //rsi = (2n + 1) 
		r10 *= 2 //rsi = 2*(2n+1) 
		rdi *= r10 // rdi = 2 * (2n+1) * C_n
		rsi += 2 //rsi = n+2
		mem rsp -8 <- :ret_divide
		call :divide 2 
		:ret_divide 
		return
	)
	(:divide //divides two positive unencoded integers, returns an unencoded value
		//rdi = numerator
		//rsi = denominator
		2 0
		rax <- 0
		:divide_loop
			cjump rdi < rsi :end_divide //if num < denom, end
			rdi -= rsi
			rax+=1
		goto :divide_loop

		:end_divide
		return

	)
)