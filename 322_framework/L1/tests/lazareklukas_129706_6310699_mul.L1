// encoded mul
// rdi, rsi, rdx, rcx, r8, r9
(:main
 (:encode
  1 0 // rdi = n
  :encode_begin
  rax <- rdi
  rax <<= 1
  rax += 1
  return)
 (:decode
  1 0 // rdi = n
  rax <- rdi
  rax >>= 1
  return)
 (:encoded_add
  2 0 // rdi = a, rsi = b
  // optimized version
  rax <- rdi
  rax += rsi
  rax -= 1
  return)
  (:encoded_sub
  2 0 // rdi = a, rsi = b :: a - b
  // optimized version
  rax <- rdi
  rax -= rsi
  rax += 1
  return)
 (:encoded_sub1
  1 0 // rdi = x
  rsi <- 3 // encode(1) = 3
  mem rsp -8 <- :encoded_sub1__ret_addr__encoded_sub
  call :encoded_sub 2
  :encoded_sub1__ret_addr__encoded_sub
  return)
 (:encoded_mul_impl
  3 3 // rdi = a, rsi = b, rdx = acc
  // using callee-save registers
  mem rsp 0 <- r12
  mem rsp -8 <- r13
  mem rsp -16 <- r14

  :encoded_mul_impl_begin
  r12 <- rdi
  r13 <- rsi
  r14 <- rdx

  cjump rdi = 1 :encoded_mul_impl__ret0
  cjump rdi = 3 :encoded_mul_impl__retacc :encoded_mul_impl__recur

  :encoded_mul_impl__recur
  rdi <- r13
  rsi <- r14
  mem rsp -8 <- :encoded_mul_impl__ret_addr__encoded_add
  call :encoded_add 2
  :encoded_mul_impl__ret_addr__encoded_add
  r14 <- rax
  rdi <- r12
  mem rsp -8 <- :encoded_mul_impl__ret_addr__encoded_sub1
  call :encoded_sub1 1
  :encoded_mul_impl__ret_addr__encoded_sub1
  rdi <- rax
  rsi <- r13
  rdx <- r14
  goto :encoded_mul_impl_begin

  :encoded_mul_impl__ret0
  r14 <- 1 // encode(0) = 1

  :encoded_mul_impl__retacc
  rax <- r14

  // restore callee-save registers
  r12 <- mem rsp 0
  r13 <- mem rsp -8
  r14 <- mem rsp -16
  return)
 (:encoded_mul
  2 0
  rdx <- rsi
  mem rsp -8 <- :encoded_mul__ret_addr__encoded_mul_impl
  call :encoded_mul_impl 3
  :encoded_mul__ret_addr__encoded_mul_impl
  return)
 (:main
  0 0
  rdi <- 5 // encode(2) = 5
  rsi <- 11 // encode(5) = 11
  mem rsp -8 <- :main__ret_addr__encoded_mul
  call :encoded_mul 2
  :main__ret_addr__encoded_mul

  rdi <- rax
  call print 1

  return))
