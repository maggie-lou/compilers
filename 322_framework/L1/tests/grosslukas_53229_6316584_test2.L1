(:go
  (:go 0 0
   :sqrt_9 // Should be 3
     rdi <- 9
     mem rsp -8 <- :ret1
     call :floorSqrt 1
   :ret1  
     rdi <- rax
     rdi <<= 1
     rdi += 1
     call print 1
   :sqrt_100 // Should be 10
     rdi <- 100
     mem rsp -8 <- :ret2
     call :floorSqrt 1
   :ret2
     rdi <- rax
     rdi <<= 1
     rdi += 1
     call print 1
   :sqrt_1225 // Should be 35
     rdi <- 1225
     mem rsp -8 <- :ret3
     call :floorSqrt 1
   :ret3
     rdi <- rax
     rdi <<= 1
     rdi += 1
     call print 1

     return
  )
  (:floorSqrt 1 0
     cjump rdi <= 1 :early_return   // 0, 1, or negative numbers
     goto :loop_start
   :early_return
     rax <- rdi
     goto :done
   :loop_start
     rsi <- 1                       // Counter
     rdx <- 1                       // Holds current product
   :loop
     cjump rdi < rdx :normal_return // Loop until we reach the input
     rsi += 1
     rdx <- rsi
     rdx *= rdx
     goto :loop
   :normal_return
     rax <- rsi
     rax -= 1
   :done
     return
  )
)
