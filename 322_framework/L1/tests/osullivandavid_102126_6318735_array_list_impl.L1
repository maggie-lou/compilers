//A somewhat complete implementation of an array list (an automatically resizing, "infinite" list). It is "somewhat" complete because it doesn't have the ability to delete, only to add and get elements
//The array list automatically resizes when it reaches it capacity, the current paramters for this are to start with a capacity of 5, and double when reaching capacity 

//================Array list API=============================================================
	//:create_list - creates a new array list and returns it.
	//The paramater that create_list returns is passed as the first argument into all of the following functions:
		//:add - add element to list, returns new size. rdi-list, rsi-element to add
		
		//:get - get element from list. rdi is list, Second argument (rsi) is the 0-indexed element to get (paramater must be encoded). If argument is out of bounds prints array-error. array-error will refer to paramaters as they were 1-indexed to make it make more sense when reading (e.g. accessing element 1 of a size 1 list will read: "attempted to use postion 2 in an array that only has 1 position")
		
		//:size - returns # of elements in list. rdi-list
		
		//:print_list print out a graphical representation of list (users should not call print directly on the list "object"). rdi-list
//===========================================================================================


//=====================Internal Representation===============================
//The internal representation of the array list employs logic similar to a ** in C. There is a single element array which contains a memory address. This single element array is the array list returned by create_list and the paramater that should be passed into all of the Array List API calls
//The memory address in the single element array is the location of another array. That array contains in it's first element a "data array" (which currently is just a one element array storing the current size) and the elements in the array. Graphically it looks like this:
//ARRAY_LIST -> {s:1, A}
//A -> {DATA, elem0, elem1, elem2, ...}
//DATA -> {s1, size}
//================================================================================


(:main
	(:main
		0 4
		//save callee saved register
		mem rsp 0 <- r12 //r12 will store the arraylist
		mem rsp 8 <- r13 //r13 will store the place to jump back to after displaying the list
		mem rsp 16 <- r14 //r14 will store counter for loops
		mem rsp 24 <- r15 //r15 will store # of iterations for loops
		
		//===========CREATE NEW ARRAY LIST STORE IN R12=================
			mem rsp -8 <- :main_ret_create
			call :create_list 0
			:main_ret_create
			r12 <- rax //r12 will store the created list
		//============================================================


		//=================TEST 1: PRINT EMPTY LIST AND SIZE OF EMPTY LIST==================
			r13 <- :ret_main_print_empty
			goto :print_list_shorthand
			:ret_main_print_empty

			r13 <- :ret_main_print_empty2
			goto :print_size_shorthand
			:ret_main_print_empty2
		//=================================================================================
		

		
		

		

		//=================TEST 2: ADD ELEMENTS TO ARRAY LIST AND PRINT OUT LIST AND SIZE====================
			r14 <- 5
			r15 <- 16
			//Add 11 elements to the array list, each time time printing out the array list and its size
			:loop1_main
				
				
				r13 <- :main_add
				//encode r14
				r14 <<= 1
				r14++
				rdi <- r12
				rsi <- r14 
				r14 >>= 1 //decode r14
				goto :add_print_list_shorthand
				:main_add

				r13 <- :main_size
				goto :print_size_shorthand
				:main_size
				r14++
			cjump r14 < r15 :loop1_main
		//======================================================================================================
		 




		//=================TEST 3: GET SUCCESIVE ELEMENTS FROM ARRAY LIST AND THEN ATTEMPT TO THROW AN OUT-OF-BOUNDS ERROR ====================
			 //gets 11 elements from the array list, and prints them out. Then attempts to access a 12th element and prints out an array-error

			 r14 <- 0
			 r15 <- 12
			 r13 <- :main_get
			 :loop2_main
			 	
				//encode r14
				r14 <<= 1
				r14++
				rdi <- r12
				rsi <- r14 
				r14 >>= 1 //decode r14
				goto :print_get_shorthand
				:main_get
				r14++ 
			 cjump r14 < r15 :loop2_main
		 //========================================================================================================================




		 //========TEST 4: GET A LARGER OUT-OF-BOUNDS-ERROR================= (Note: this test won't run unless Test 3 is commented out)
		 	//add 10 to r14 and encode it
		 	r14 += 10
		 	r14 <<= 1
		 	r14++
		 	rsi <- r14
		 	r13 <- :ret_main_test_4
		 	goto :print_get_shorthand
		 	:ret_main_test_4
		 //================================================================

		//restore callee saved registers
		r12 <- mem rsp 0
		r13 <- mem rsp 8
		r14 <- mem rsp 16
		r15 <- mem rsp 24
		return



		//================SHORTHAND LABELS=====================================================
			//Used to make printing list easier. Whenever you want to call, put return label in r13 
			:print_list_shorthand
			mem rsp -8 <- r13
			rdi <- r12
			call :print_list 1

			//Used to make adding to list easier. Whenever you want to call, put return label in r13 and value to add to list in rsi
			:add_list_shorthand
			mem rsp -8 <- r13
			rdi <- r12
			call :add 2

			//Used to make adding and then immediately printing easier. Whenever you want to call, put return label in r13 and value to add to list in rsi
			:add_print_list_shorthand
			mem rsp -8 <- :print_list_shorthand
			rdi <- r12
			call :add 2

			//Used to make printing out the size easier. Whenever you want to call, put return label in r13 
			:print_size_shorthand
			mem rsp -8 <- :ret_print_rax
			rdi <- r12
			call :size 1
			

			//Used to make getting an element easier. Whenever you want to call, put return label in r13, and element to get in rsi
			:print_get_shorthand
			mem rsp -8 <- :ret_print_rax
			rdi <- r12
			call :get 2

			//Goto here to print out whatever is rax and then return to what's in r13
			:ret_print_rax
			rdi <- rax
			call print 1
			mem rsp -8 <- r13
			call :nothing 0
		//========================================================================================================================

		
	)
	
	(:nothing //L1 doesn't allow goto register, so this is my hacky way of doing it (Put the register you want to return to in the return spot on the stack then call this function)
		0 0
		return
	)
//=============================ARRAY LIST API FUNCTIONS========================================================================================
	(:create_list //creates a new array list and returns it in rax (the returned value can sort of be thought of a ** in c, as it returns the memory address of an array holding the memory address of the list (this is the memory address of the underlying list can be modified in the case of resizing))
		0 2
		//save callee saved register
		mem rsp 0 <- r12
		mem rsp 8 <- r13

		//create a new array of size 1 which will hold the pointer to the array list
		rdi <- 3 //1
		rsi <- 0 //doesn't matter, will change
		call allocate 2
		r13 <- rax //store list pointer array in r13


		//create new data array of size 1 (currently just holds length, but in case future data is needed, implementing this as an array rather than just using first element of actual array)
		rdi <- 3 //1
		rsi <- 0 //length is stored as an unecoded value to make arithmetic operations simpler
		call allocate 2
		r12 <- rax //store data array pointer in r12
		
		//create the initial list, a new array of size 6
		rdi <- 13 //6
		rsi <- 1 //0 
		call allocate 2
		mem rax 8 <- r12 //put at the first element of the array list, the pointer to the data array
		
		mem r13 8 <- rax //put at the first element of the list pointer array, the pointer to the underlying array list
		rax <- r13 //return the **list
		//restore callee saved register
		r12 <- mem rsp 0
		r13 <- mem rsp 8
		return //return the pointer to array list
	)

	(:print_list //prints a representation of the current list. This function should always be called to display the array list. Calling print directly could lead to seg faults
		1 0
		//rdi - the array list (a "**")
		mem rsp -8 <- :ret_print_to_display
		call :__get_display_list 1
		:ret_print_to_display
		rdi <- rax
		call print 1
		return
	)
	(:get //returns the ith element of the list. If i is out of bounds invokes array error
		2 2
		//rdi - the array list (a "**")
		//rsi - element to access (0 indexed) (encoded)
		rsi >>= 1 //decode index
		mem rsp 0 <- rdi
		mem rsp 8 <- rsi

		mem rsp -8 <- :ret_get_to_size
		call :size 1
		:ret_get_to_size
		rax >>= 1 //decode size
		cjump rsi < rax :valid_index //if paramter is smaller than size, acccess element as per usual
		
		//======ERROR case=====
			rdi <- mem rsp 0 //put into rdi the **
			mem rsp -8 <- :ret_get_to_displaylist
			call :__get_display_list 1 //generate a display list for purposes of array error
			:ret_get_to_displaylist
			
			rdi <- rax //put display list as first argument
			rsi <- mem rsp 8 //attempted index access as second element
			rsi++ //increment rsi because it looks better for array-error (e.g. if accessing elemnt 2 in a size 2 list it will say position 3 )
			//encode rsi
			rsi <<= 1
			rsi++
			call array-error 2
			return
		//======================
		

		:valid_index
		//restore arguments
		rdi <- mem rsp 0
		rsi <- mem rsp 8
		
		rdi <- mem rdi 8 //put in rdi the pointer to the underlying list
		rsi +=2 //+1 for the size and +1 for the data array
		rax @ rdi rsi 8 
		rax <- mem rax 0
		return

	)
	(:add //adds an element to the list and returns the new size
		2 3
		//rdi - the array list (a "**")
		//rsi - element to add
		
		mem rsp 16 <- rdi //store on stack the **
		rdi <- mem rdi 8 //put in rdi the pointer to the underlying list
		mem rsp 0 <- rdi
		mem rsp 8 <- rsi
		
		//increase size by 1
		mem rsp -8 <- :ret_add_to_incr
		call :___incr_size 1 //after this call rax will equal the new size of the array upon adding a new element
		:ret_add_to_incr 
		
		//restore arguments
		rdi <- mem rsp 0
		rsi <- mem rsp 8

		r10 <- mem rdi 0 //put into r10 the capacity of the list
		r10-- //the capacity is one less because one element is for the data array
		cjump rax <= r10 :no_resize_needed //if the new size is less than or equal to the capacity, jump to just adding an element, otherwise call resize
		 

		mem rsp 0 <- rsi
		mem rsp 8 <- rax

		mem rsp -8 <- :ret_add_to_resize_larger
		call :___resize_larger 1
		:ret_add_to_resize_larger
		

		rdi <- rax //our underlying list has changed due to the resize
	

		r10 <- mem rsp 16 //mem rsp 16 is the ** 
		mem r10 8 <- rdi //put new underlying list into ** 
		
		//restore rsi (argument to add to list) and rax (new size)
		rsi <- mem rsp 0
		rax <- mem rsp 8
		
		:no_resize_needed
		rax++ //increment rax by 1 because we want to skip past the first element of the array (which stores the data array)
		r10 @ rdi rax 8 //r10 = rdi + 8*rax, rax refers to the size, and arrays are essentially 2-indexed because the first element is not accesible (stores capacity), and the second element stores data, so we start at the pointer and move up by 8s of the new size: [rdi: 8-bytes, size][[rdi + 8: 8-bytes, data array][rdi + 16: 8-bytes, element 0][rdi + 16: 8-bytes, element 1]...
		mem r10 0 <- rsi //at this element we place the element that we want to add
		return
	)
	(:size //returns the (encoded) size of the provided array list
		1 0
		//rdi - the array list (a "**")

		mem rsp -8 <- :ret_size_size_underlying
		rdi <- mem rdi 8
		call :___size_underlying_list 1
		:ret_size_size_underlying
		return
	)
//========================================================================================================================


//================PRIVATE FUNCTIONS (functions that shouldn't be accessed by user of array list)================================================================
	(:__get_display_list //returns an array that is a representation of the array list. It does this by allocating a new list of the current size, and copying over elements. Modifying this list will not modify the original
		1 0
		//rdi - the array list (a "**")
		rdi <- mem rdi 8 //put in rdi the pointer to the underlying list
		rsi <- 1 //want to keep size the same
		mem rsp -8 <- :end_get_display_list
		call :___copy_underlying_array 2
		:end_get_display_list
		return
	)
	(:___copy_underlying_array //copies over the provided underlying array list to a new one with a multiple of the provided
		//rdi - pointer to the underlying array
		//rsi - a multiple of the old capacity
		2 2
		mem rsp 0 <- rdi
		mem rsp 8 <- rsi

		mem rsp -8 <- :ret_get_display_to_size
		call :___size_underlying_list 1 //rax now stores (encoded) size
		:ret_get_display_to_size
		
		rsi <- mem rsp 8 //restore rsi

		rax >>= 1 //decode size
		mem rsp 8 <- rax //store decoded size
		rax *= rsi //multiply by multiple
		
		//encode size
		rax <<= 1 
		rax++
		
		//create a new list
		rdi <- rax //the encoded size of the new list
		rsi <- 0
		call allocate 2
		
		r11 <- mem rsp 8 //store unencoded size of old list in r11
		rdi <- mem rsp 0 //put pointer to original array list in rdi
		
		r10 <- 1 //put counter in r10
		rdi += 8 //we want to start at the 1st element (the data array), so that the first access in the loop will be (rdi+8)+8 (the first element)
		:loop_copy_underlying
			cjump r11 < r10 :end_copy_underlying //jump out of loop is size < counter 
			r8 @ rdi r10 8 //r8 = pointer to r10th element (1-indexed) of array list
			r9 @ rax r10 8 //r9 = pointer to r10th element (1-indexed) of new array list
			
			//copy over the element
			rcx <- mem r8 0
			mem r9 0 <- rcx

			r10++ //increment counter
		goto :loop_copy_underlying

		:end_copy_underlying
		return

	)
	(:___resize_larger //takes in an underlying array, copies over the elements to a new list with double the size and returns a pointer to that new list
		1 1
		//rdi - pointer to underlying array
		
		mem rsp 0 <- rdi
		rdi <- mem rdi 0 //put size in rdi


		//calculate new size (doubles capacity and leaves one spot for data array):
		rdi--
		rdi*=2
		rdi++

		//encode size
		rdi <<= 1
		rdi++

		rsi <- 0 //arbitrary value
		call allocate 2

		rdi <- mem rsp 0 //restore rdi (the pointer to the underlying array)
		r10 <- 1 //set counter to 1
		r11 <- mem rax 0 //set r11 to size
		:loop_resize_larger
			cjump r11 < r10 :end_resize_larger //jump out of loop is size < counter 
			r8 @ rdi r10 8 //r8 = pointer to r10th element underlying of array list
			r9 @ rax r10 8 //r9 = pointer to r10th element of new array list
			
			//copy over the element
			rcx <- mem r8 0
			mem r9 0 <- rcx

			r10++ //increment counter
		goto :loop_resize_larger

		:end_resize_larger
		return
	)
	(:___incr_size //increments the size of the provided array list by 1 and returns the new size
		1 0
		//rdi - pointer to the underlying array
		rdi <- mem rdi 8 //put first element of array (pointer to data array) into rdi
		mem rdi 8 +=1 //increment size of the length element
		rax <- mem rdi 8 //return the new size
		return
	)
	(:___size_underlying_list //returns the size of the provided underlying list (consists of a data list and elements)
		1 0
		//rdi - pointer to the underlying array
		rdi <- mem rdi 8 //put first element of array (pointer to data array) into rdi
		rax <- mem rdi 8 //put the first element of the data array (the current size) into rax
		
		//encode the size
		rax <<= 1
		rax++
		return
	)
	
)