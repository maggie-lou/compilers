// Biraj Parikh
// EECS 322 W19
// Prints an array {s: N, 1, 2, ..., N} and prints the sum afterwards
(:main
	(:main 0 0
		// create array of size N
		r12 <- 15 // N
		rdi <- r12 
		rsi <- 1
		call allocate 2
		r13 <- rax // location of array

		// populate array
		r14 <- rax // location of array
		r15 <- 3 // counter starting at 1
		
		:arr_init_loop
		mem r13 8 <- r15
		r13 += 8 // increment to next array position
		r15 += 2 // increment counter
		cjump r15 <= r12 :arr_init_loop :calc_sum_and_ret
		:calc_sum_and_ret
		rdi <- r14
		call print 1
		mem rsp -8 <- :sum_arr_ret
		call :sum_arr 1 // calculate the sum of the array
		:sum_arr_ret
		return
	)
	
	(:sum_arr 1 0
		// array at r14, array size at r12
		rbx <- 1 // 0, progressive sum
		r13 <- r14 // store array in r13 to iterate through
		r8 <- 1 // counter
		:sum_loop
		r10 <- mem r13 8 // store current array value in r10
		rbx += r10 // add to sum
		rbx-- // re-encode summed value
		r13 += 8 // go to next array element
		r8 += 2 // increment counter
		cjump r8 < r12 :sum_loop :print_and_ret
		:print_and_ret
		rdi <- rbx
		call print 1
		return
	)
)
