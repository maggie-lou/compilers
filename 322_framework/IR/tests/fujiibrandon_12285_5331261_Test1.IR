define void :main ( ){
  :entry
  int64 %result

  // Example 0
  int64[][][] %a
  %a <- new Array(5, 5, 5)
  %a[0][0][0] <- 3
  %a[0][0][1] <- 5
  %a[0][1][0] <- 7
  %a[0][1][1] <- 9
  %a[1][0][0] <- 11
  %a[1][0][1] <- 13
  %a[1][1][0] <- 15
  %a[1][1][1] <- 17
  call :printMatrixElems(%a)
  %result <- call :sumMatrix(%a)
  call print(%result)

  int64[][][] %b
  %b <- new Array(5, 5, 5)
  %b[0][0][0] <- 3
  %b[0][0][1] <- 5
  %b[0][1][0] <- 7
  %b[0][1][1] <- 9
  %b[1][0][0] <- 11
  %b[1][0][1] <- 13
  %b[1][1][0] <- 15
  %b[1][1][1] <- 17

  int64[][][] %res
  %res <- call :elemMatrixMul(%a, %b)
  call :printMatrixElems(%res)

  // Example 1
  int64[][][] %m
  %m <- new Array(11, 11, 11)
  %n <- 7 // encoded 3
  call :setMatrixToN (%m, %n)
  %result <- call :sumMatrix(%m)
  call print(%result) // expects 375

  // Example 2
  %m <- new Array(9, 9, 9)
  %n <- 9
  call :setMatrixToN(%m, %n)
  %result <- call :sumMatrix(%m)
  call print(%result) // expects 256

  // Example 3
  %m <- new Array(21, 21, 21)
  %n <- 21
  call :setMatrixToN(%m, %n)
  %result <- call :sumMatrix(%m)
  call print(%result) // expects 10000

  // Example 4 (mismatched matrix dimensions)
  %a <- new Array(5, 5, 5)
  %b <- new Array(21, 21, 21)
  %res <- call :elemMatrixMul(%a, %b)
  call :printMatrixElems(%res) // expects a zeroed-out matrix based on the a's dimensions

  // Example 5 (mismatched matrix dimensions)
  %a <- new Array(3, 3, 3)
  %a[0][0][0] <- 3
  %b <- new Array(5, 5, 5)
  %b[0][0][0] <- 3
  %b[0][0][1] <- 5
  %b[0][1][0] <- 7
  %b[0][1][1] <- 9
  %b[1][0][0] <- 11
  %b[1][0][1] <- 13
  %b[1][1][0] <- 15
  %b[1][1][1] <- 17
  %res <- call :elemMatrixMul(%a, %b)
  call :printMatrixElems(%res) // expects a zeroed-out matrix based on the a's dimensions

  // Example 6
  %m <- new Array(13, 13, 13)
  %m[0][0][0] <- 3
  %m[0][0][1] <- 3
  %m[0][1][0] <- 3
  %m[0][1][1] <- 3
  %m[1][0][0] <- 3
  %m[1][0][1] <- 3
  %m[1][1][0] <- 3
  %m[1][1][1] <- 3
  %m[0][0][2] <- 3
  %m[0][2][0] <- 3
  %m[0][2][2] <- 3
  %m[2][0][0] <- 3
  %m[2][1][2] <- 3
  %m[2][3][0] <- 3
  %m[5][5][3] <- 3
  %result <- call :sumMatrix(%m)
  call print(%result)
  return
}

define int64 :sumMatrix (int64[][][] %m) {
  :entry
  int64 %dim0
  int64 %dim1
  int64 %dim2
  int64 %i
  int64 %j
  int64 %k

  int64 %val
  int64 %done

  %dim0 <- length %m 0
  %dim1 <- length %m 1
  %dim2 <- length %m 2

  call print(%dim0)
  call print(%dim1)
  call print(%dim2)

  %dim0 <- %dim0 - 1
  %dim0 <- %dim0 >> 1
  %dim1 <- %dim1 - 1
  %dim1 <- %dim1 >> 1
  %dim2 <- %dim2 - 1
  %dim2 <- %dim2 >> 1

  %i <- 0
  %j <- 0
  %k <- 0
  %sum <- 1

  br :loop

  :loop
      %val <- %m[%i][%j][%k]
      %sum <- %sum - 1
      %sum <- %sum >> 1
      %val <- %val - 1
      %val <- %val >> 1

      %sum <- %sum + %val
      %sum <- %sum << 1
      %sum <- %sum + 1

      br :increment

  :increment
      br :increment_k

  :increment_k
      %k <- %k + 1
      %done <- %k = %dim2
      br %done :reset_k :loop

  :reset_k
      %k <- 0
      br :increment_j

  :increment_j
      %j <- %j + 1
      %done <- %j = %dim1
      br %done :reset_j :loop

  :reset_j
      %j <- 0
      br :increment_i

  :increment_i
      %i <- %i + 1
      %done <- %i = %dim0
      br %done :after :loop

  :after
  return %sum
}

define int64[][][] :elemMatrixMul (int64[][][] %mat1, int64[][][] %mat2) {
:entry
  int64[][][] %mat_prod

  int64 %dim0
  int64 %dim1
  int64 %dim2
  int64 %m1_dim0
  int64 %m1_dim1
  int64 %m1_dim2
  int64 %m2_dim0
  int64 %m2_dim1
  int64 %m2_dim2
  int64 %dim_match
  int64 %i
  int64 %j
  int64 %k

  int64 %val1
  int64 %val2
  int64 %done
  int64 %prod

  %m1_dim0 <- length %mat1 0
  %m1_dim1 <- length %mat1 1
  %m1_dim2 <- length %mat1 2
  %m2_dim0 <- length %mat2 0
  %m2_dim1 <- length %mat2 1
  %m2_dim2 <- length %mat2 2

  %dim_match <- %m1_dim0 = %m2_dim0
  br %dim_match :check_dim1 :terminate

  :check_dim1
    %dim_match <- %m1_dim1 = %m2_dim1
    br %dim_match :check_dim2 :terminate

  :check_dim2
    %dim_match <- %m1_dim2 = %m2_dim2
    br %dim_match :continue :terminate

  :terminate
    %mat_prod <- new Array(%m1_dim0, %m1_dim1, %m1_dim2)
    return %mat_prod

  :continue
  %dim0 <- %m1_dim0
  %dim1 <- %m1_dim1
  %dim2 <- %m1_dim2
  %mat_prod <- new Array(%dim0, %dim1, %dim2)

  %dim0 <- %dim0 - 1
  %dim0 <- %dim0 >> 1
  %dim1 <- %dim1 - 1
  %dim1 <- %dim1 >> 1
  %dim2 <- %dim2 - 1
  %dim2 <- %dim2 >> 1

  %i <- 0
  %j <- 0
  %k <- 0

  br :loop

  :loop
      %val1 <- %mat1[%i][%j][%k]
      %val1 <- %val1 - 1
      %val1 <- %val1 >> 1
      %val2 <- %mat2[%i][%j][%k]
      %val2 <- %val2 - 1
      %val2 <- %val2 >> 1

      %prod <- %val1 * %val2
      %prod <- %prod << 1
      %prod <- %prod + 1
      %mat_prod[%i][%j][%k] <- %prod

      br :increment

  :increment
      br :increment_k

  :increment_k
      %k <- %k + 1
      %done <- %k = %dim2
      br %done :reset_k :loop

  :reset_k
      %k <- 0
      br :increment_j

  :increment_j
      %j <- %j + 1
      %done <- %j = %dim1
      br %done :reset_j :loop

  :reset_j
      %j <- 0
      br :increment_i

  :increment_i
      %i <- %i + 1
      %done <- %i = %dim0
      br %done :after :loop

  :after
  return %mat_prod
}

define void :printMatrixElems (int64[][][] %m) {
:entry
  int64 %dim0
  int64 %dim1
  int64 %dim2
  int64 %i
  int64 %j
  int64 %k

  int64 %val
  int64 %done

  %dim0 <- length %m 0
  %dim1 <- length %m 1
  %dim2 <- length %m 2
  %dim0 <- %dim0 - 1
  %dim0 <- %dim0 >> 1
  %dim1 <- %dim1 - 1
  %dim1 <- %dim1 >> 1
  %dim2 <- %dim2 - 1
  %dim2 <- %dim2 >> 1

  %i <- 0
  %j <- 0
  %k <- 0

  br :loop

  :loop
      %val <- %m[%i][%j][%k]
      call print (%val)
      br :increment

  :increment
      br :increment_k

  :increment_k
      %k <- %k + 1
      %done <- %k = %dim2
      br %done :reset_k :loop

  :reset_k
      %k <- 0
      br :increment_j

  :increment_j
      %j <- %j + 1
      %done <- %j = %dim1
      br %done :reset_j :loop

  :reset_j
      %j <- 0
      br :increment_i

  :increment_i
      %i <- %i + 1
      %done <- %i = %dim0
      br %done :after :loop

  :after
  return
}

define int64 :setMatrixToN (int64[][][] %m, int64 %n) {
  :entry
  int64 %dim0
  int64 %dim1
  int64 %dim2
  int64 %i
  int64 %j
  int64 %k

  int64 %done

  %dim0 <- length %m 0
  %dim1 <- length %m 1
  %dim2 <- length %m 2
  %dim0 <- %dim0 - 1
  %dim0 <- %dim0 >> 1
  %dim1 <- %dim1 - 1
  %dim1 <- %dim1 >> 1
  %dim2 <- %dim2 - 1
  %dim2 <- %dim2 >> 1
  %i <- 0
  %j <- 0
  %k <- 0

  br :loop

  :loop
      %m[%i][%j][%k] <- %n
      br :increment

  :increment
      br :increment_k

  :increment_k
      %k <- %k + 1
      %done <- %k = %dim2
      br %done :reset_k :loop

  :reset_k
      %k <- 0
      br :increment_j

  :increment_j
      %j <- %j + 1
      %done <- %j = %dim1
      br %done :reset_j :loop

  :reset_j
      %j <- 0
      br :increment_i

  :increment_i
      %i <- %i + 1
      %done <- %i = %dim0
      br %done :after :loop

  :after
  return 3
}
