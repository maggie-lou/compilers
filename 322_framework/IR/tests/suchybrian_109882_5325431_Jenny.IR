//This basically populates an array with numbers containing 8675309
define void :main () {

    :entry
    int64[] %jennysNumber
    int64 %tempJenny
    int64 %retVal

     %jennysNumber <- new Array(29)
    %tempJenny <- length %jennysNumber 0
    %retVal <- call :Jenny (8)
    %jennysNumber[0] <- %retVal
    %tempJenny <- %tempJenny + 8
    %retVal <- call :Jenny (6)
    %jennysNumber[1] <- %retVal
    %tempJenny <- %tempJenny + 8
    %retVal <- call :whoCanI (7)
    %jennysNumber[2] <- %retVal
    %tempJenny <- %tempJenny + 8
    %retVal <- call :TurnTo (5)
    %jennysNumber[3] <- %retVal
    %tempJenny <- %tempJenny + 8
    %retVal <- call :youGiveMeSomething (3)
    %jennysNumber[4] <- %retVal
    %tempJenny <- %tempJenny + 8
    %retVal <- call :iCanHold (0)
    %jennysNumber[5] <- %retVal
    %tempJenny <- %tempJenny + 8
    %retVal <- call :onTo (9)
    %jennysNumber[6] <- %retVal
    %tempJenny <- %tempJenny + 8

    %retVal <- call :IKnow (8)
    %jennysNumber[7] <- %retVal
    %tempJenny <- %tempJenny + 8
    %retVal <- call :youllThink (6)
    %jennysNumber[8] <- %retVal
    %tempJenny <- %tempJenny + 8
    %retVal <- call :ImLikeThe (7)
    %jennysNumber[9] <- %retVal
    %tempJenny <- %tempJenny + 8
    %retVal <- call :othersB4 (5)
    %jennysNumber[10] <- %retVal
    %tempJenny <- %tempJenny + 8
    %retVal <- call :whoSaw (3)
    %jennysNumber[11] <- %retVal
    %tempJenny <- %tempJenny + 8
    %retVal <- call :yourNameAndNumber (0)
    %jennysNumber[12] <- %retVal
    %tempJenny <- %tempJenny + 8
    %retVal <- call :onTheWall (9)
    %jennysNumber[13] <- %retVal
    %tempJenny <- %tempJenny + 8



    call :gimmeACall (%jennysNumber)
    return
}
define int64 :Jenny (int64 %number) {
    :entry
    int64[] %tempSpot
    int64 %number2
    int64[] %numAr
    int64[] %ar
    int64 %arElement

    %tempSpot <- new Array(7)
    %tempSpot[0] <- %number

    %number <- %number < 1
    %numAr <- new Array(11)
    %number <- %number * 200000
    %ar <- new Array(7)
    %arElement <- %ar[0]

    %number <- %tempSpot[0]
    return %number    
}
define int64 :whoCanI (int64 %number) {
    :entry
    int64[] %tempSpot
    int64 %number2
    int64[] %numAr

    %tempSpot <- new Array(7)
    %tempSpot[0] <- %number
    %number <- %number < 1
    %numAr <- new Array(11)
    %number <- %number * 200000
    %number <- %tempSpot[0]
    return %number   
}
define int64 :TurnTo (int64 %number) {
    :entry
    int64[] %tempSpot
    int64 %number2
    int64[] %numAr
    int64 %test1
    int64 %test2
    int64 %test3
    int64 %test4
    int64 %test5
    int64 %test6

    %tempSpot <- new Array(7)
    %tempSpot[0] <- %number
    %number <- %number < 1
    %numAr <- new Array(11)
    %number <- %number * 200000
    %number <- %tempSpot[0]
    %test1 <- 7
    %test2 <- 11
    %test3 <- 3
    %test4 <- 9
    %test5 <- 5
    %test6 <- 1
    return %number  
}
define int64 :youGiveMeSomething (int64 %number) {
    :entry
    int64[] %tempSpot
    int64 %number2
    int64[] %numAr
    int64[][][] %threeD
    int64 %first_dimension_length
    int64 %second_dimension_length
    int64 %third_dimension_length

    %tempSpot <- new Array(7)
    %tempSpot[0] <- %number
    %number <- %number < 1
    %numAr <- new Array(11)
    %number <- %number * 200000
    %number <- %tempSpot[0]
    %threeD <- new Array(13,13,13)
    %first_dimension_length <- length %threeD 0
    %second_dimension_length <- length %threeD 1
    %third_dimension_length <- length %threeD 2
    return %number         
}

define int64 :iCanHold (int64 %number) {
    :entry
    int64[] %tempSpot
    int64 %number2
    int64[] %numAr
    int64[][][] %threeD
    int64 %first_dimension_length
    int64 %second_dimension_length
    int64 %third_dimension_length

    %tempSpot <- new Array(7)
    %tempSpot[0] <- %number
    %number <- %number < 1
    %numAr <- new Array(11)
    %number <- %number * 200000
    %number <- %tempSpot[0]
    %threeD <- new Array(13,13,13)
    %first_dimension_length <- length %threeD 0
    %second_dimension_length <- length %threeD 1
    %third_dimension_length <- length %threeD 2
    return %number                
}

define int64 :onTo (int64 %number) {
    :entry
    int64[] %tempSpot
    int64[] %numAr

    %tempSpot <- new Array(7)
    %tempSpot[0] <- %number
    %number <- %number < 1
    %numAr <- new Array(11)
    %number <- %number * 200000
    %number <- %tempSpot[0]
    return %number         
}

define int64 :IKnow (int64 %number) {
    :entry
    int64[] %tempSpot
    int64 %number2
    int64[] %numAr
    int64[] %ar
    int64 %arElement

    %tempSpot <- new Array(7)
    %tempSpot[0] <- %number

    %number <- %number < 1
    %numAr <- new Array(11)
    %number <- %number * 200000
    %ar <- new Array(7)
    %arElement <- %ar[0]

    %number <- %tempSpot[0]
    return %number    
}

define int64 :youllThink (int64 %number) {
    :entry
    int64[] %tempSpot
    int64 %number2
    int64[] %numAr
    int64[] %ar
    int64 %arElement

    %tempSpot <- new Array(7)
    %tempSpot[0] <- %number

    %number <- %number < 1
    %numAr <- new Array(11)
    %number <- %number * 200000
    %ar <- new Array(7)
    %arElement <- %ar[0]

    %number <- %tempSpot[0]
    return %number    
}

define int64 :ImLikeThe (int64 %number) {
    :entry
    int64[] %tempSpot
    int64 %number2
    int64[] %numAr
    int64[] %ar
    int64 %arElement

    %tempSpot <- new Array(7)
    %tempSpot[0] <- %number

    %number <- %number < 1
    %numAr <- new Array(11)
    %number <- %number * 200000
    %ar <- new Array(7)
    %arElement <- %ar[0]

    %number <- %tempSpot[0]
    return %number    
}

define int64 :othersB4 (int64 %number) {
    :entry
    int64[] %tempSpot
    int64 %number2
    int64[] %numAr
    int64[] %ar
    int64 %arElement

    %tempSpot <- new Array(7)
    %tempSpot[0] <- %number

    %number <- %number < 1
    %numAr <- new Array(11)
    %number <- %number * 200000
    %ar <- new Array(7)
    %arElement <- %ar[0]

    %number <- %tempSpot[0]
    return %number    
}

define int64 :whoSaw(int64 %number) {
    :entry
    int64[] %tempSpot
    int64 %number2
    int64[] %numAr
    int64[] %ar
    int64 %arElement

    %tempSpot <- new Array(7)
    %tempSpot[0] <- %number

    %number <- %number < 1
    %numAr <- new Array(11)
    %number <- %number * 200000
    %ar <- new Array(7)
    %arElement <- %ar[0]

    %number <- %tempSpot[0]
    return %number    
}

define int64 :yourNameAndNumber(int64 %number) {
    :entry
    int64[] %tempSpot
    int64 %number2
    int64[] %numAr
    int64[] %ar
    int64 %arElement

    %tempSpot <- new Array(7)
    %tempSpot[0] <- %number

    %number <- %number < 1
    %numAr <- new Array(11)
    %number <- %number * 200000
    %ar <- new Array(7)
    %arElement <- %ar[0]

    %number <- %tempSpot[0]
    return %number    
}


define int64 :onTheWall (int64 %number) {
    :entry
    int64[] %tempSpot
    int64 %number2
    int64[] %numAr
    int64[] %ar
    int64 %arElement

    %tempSpot <- new Array(7)
    %tempSpot[0] <- %number

    %number <- %number < 1
    %numAr <- new Array(11)
    %number <- %number * 200000
    %ar <- new Array(7)
    %arElement <- %ar[0]

    %number <- %tempSpot[0]
    return %number    
}


define void :gimmeACall (int64[] %jennysNumber) {
    :entry
    int64 %compVal
    int64 %count
    int64 %number

    %count <- 0
    :top
    %compVal <- %count = 14 
    br %compVal :donezo :printANum 
    :printANum
    %number <- %jennysNumber[%count]
    %number <- %number << 1
    %number <- %number + 1 
    call print (%number)
    %count <- %count + 1
    br :top
    :donezo
    return
}
