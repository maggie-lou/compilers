define :main() {
    %array <- call allocate (5, 3)
    call print(%array)
    call :printArrayBackwards(%array)   
    %element <- call :getArrayElementByIndexPlusOne(%array, 2)
    call print(%element) 
    %length <- load %array
    %index <- 1
    :loop_start
    %sign <- %index <= %length
    br %sign :loop_next :loop_end
    :loop_next
    %element <- call :getArrayElementByIndexPlusOne(%array, %index)
    call print(%element)
    %index <- %index + 1
    br :loop_start
    :loop_end       
    return
}
define :isAddress (%p1){
    %p2 <- %p1 & 1
    %p2 <- %p2 = 0
    br %p2 :isAddress :isNumber
    :isAddress
    return 1
    :isNumber
    return 0
}
define :encode (%var) {
     :entry
     %var <- %var << 1
     %var <- %var + 1
     return %var
}
define :increaseOne (%p1){
    %p5 <- %p1 + 1
    return %p5
}
define :decreaseOne (%p1){
    %p5 <- %p1 - 1
    return %p5
}
define :getArrayElementByIndexPlusOne(%array, %index) {
    %offest <- 8 * %index
    %addr <- %array + %offest
    %element <- load %addr
    return %element
}
define :printArrayElementByIndex(%array, %index) {
    %index <- call :increaseOne (%index)
    %offest <- 8 * %index
    %addr <- %array + %offest
    %element <- load %addr
    call print(%element)
    return
}
define :printArrayBackwards (%array) {
    %is_A1_address <- call :isAddress(%A1)
    br %is_A1_address :is_array_label :not_array_label
    :is_array_label
    %length <- load %array
    %index <- %length - 1
    :loop_start
    %tmp <- %index >= 0
    br %tmp :loop_next :loop_end
    :loop_next
    call :printArrayElementByIndex(%array, %index)
    %index <- %index - 1
    br :loop_start
    :loop_end
    :not_array_label
    return
}
define :isEqual (%p1, %p2){
    %p3 <- %p1 = %P2
    br %p3 :equal :not_equal
    :equal
    return 1
    :not_equal
    return 0
}
define :getSamller(%p1, %p2) {
    %sign <- call :isSmallerAndEqual (%p1, %p2)
    br %sign :p1_smaller :p2_smaller
    :p1_smaller
    return %p1
    :p2_smaller
    return %p2   
}
define :isSmaller (%p1, %p2){
    %p3 <- %p1 < 1
    br %p3 :smaller :larger
    :smaller
    return 1
    :larger
    return 0
}
define :isSmallerAndEqual (%p1, %p2){
    %p3 <- %p1 <= 1
    br %p3 :smaller :larger
    :smaller
    return 1
    :larger
    return 0
}
define :getArrayElementByIndex(%array, %index) {
    %index <- call :increaseOne (%index)
    %offest <- 8 * %index
    %addr <- %array + %offest
    %element <- load %addr
    return %element
}