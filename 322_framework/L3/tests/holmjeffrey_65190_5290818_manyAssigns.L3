define :main () {
  :manyAssigns
  var1 <- 1
  var2 <- 2
  var3 <- var1 + var2
  var4 <- 1 + 2
  var5 <- var3 = var4
  br var5 :notAnInfiniteLoop :manyAssigns
  :notAnInfiniteLoop
  var6 <- 201
  var6 <- var6 >> 1
  var7 <- var6 + 1
  var8 <- var7 + 3
  var9 <- var8
  var10 <- var9 - 2
  call :manyOps (var10)
  var11 <- call :manyAdds ()
  return
}

define :manyAdds () {
  v1 <- 1
  v1 <- v1 + 1
  call print (v1)
  v2 <- v1
  v2 <- v2 + 1
  call print (v2)
  v3 <- v2
  v3 <- v3 + 1
  call print (v3)
  v4 <- v3
  v4 <- v4 + 1
  call print (v4)
  v5 <- v4
  v5 <- v5 + 1
  call print (v5)
  v6 <- v5
  v6 <- v6 + 1
  call print (v6)
  v7 <- v6
  v7 <- v7 + 1
  call print (v7) 
  v8 <- v7
  v8 <- v8 + 1
  call print (v8)
  v9 <- v8
  v9 <- v9 + 1
  call print (v9)
  v10 <- v9
  v10 <- v10 + 1
  call print (v10)
  return
}

define :manyOps (v) {
  v <- 1
  v <- 2
  v <- v + 2
  v <- 1 + 2
  :doRandomLabelsWork
  doVariableLabelsWork <- 3
  :doVariableLabelsWork
  :v
  br v :label1 :label2
  :label1
  v <- 1
  :label2
  call print (v)
  v <- 111
  call print (v)
  v <- v & 11
  call print (v)
  v <- v - 2
  v <- v + 2
  call print (v)
  v <- v * 2
  call print (v)
  v <- 1
  check <- v <= v
  br check :true1 :false1
  :true1
  call print (v)
  :false1
  v <- 2
  check <- v = v
  br check :true2 :false2
  :true2
  call print (v)
  :false2
  v <- 3
  check <- v >= v
  br check :true3 :false3
  :true3
  call print (v)
  :false3
  v <- 4
  check <- v < v
  br check :true4 :false4
  :true4
  call print (v)
  :false4
  check <- v > v
  br check :true5 :false5
  :true5
  call print (v)
  :false5
  v <- 1
  return
}