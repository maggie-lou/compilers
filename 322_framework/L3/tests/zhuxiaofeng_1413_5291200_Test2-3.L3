define :main() {
	:entry   
    :label1
    %encoded <- 5
    %encoded <- %encoded << 1
    %encoded <- %encoded + 1
    %array1 <- call allocate(%encoded, 1) 
    call print(%array1) 
    %element1Address <- %array1 + 8
    store %element1Address <- 5
    %element <- load %element1Address
    call print(%element)
    call print(%array1)
    %array2 <- call allocate(%encoded, 1)
    call print(%array2)
    %array3 <- call allocate(%encoded, 9) 
    call :printArray(%array3)
    call print(%array3)
    %element <- call :getArrayElementByIndex(%array3, 3)
    call print(%element)     
    br :gotoLabel
    :gotoLabel  	 	
    return
}
define :isAddress (%p1){
	%p2 <- %p1 & 1
	%p2 <- %p2 = 0
	br %p2 :isAddress :isNumber
	:isAddress
	return 1
	:isNumber
	return 0
}
define :encode (%var) {
     :entry
     %var <- %var << 1
     %var <- %var + 1
     return %var
}
define :increaseOne (%p1){
	%p5 <- %p1 + 1
	return %p5
}
define :isEqual (%p1, %p2){
	%p3 <- %p1 = %P2
	br %p3 :equal :not_equal
	:equal
	return 1
	:not_equal
	return 0
}
define :getSamller(%p1, %p2) {
	%sign <- call :isSmallerAndEqual (%p1, %p2)
	br %sign :p1_smaller :p2_smaller
	:p1_smaller
	return %p1
	:p2_smaller
	return %p2	
}
define :isSmaller (%p1, %p2){
	%p3 <- %p1 < 1
	br %p3 :smaller :larger
	:smaller
	return 1
	:larger
	return 0
}
define :isSmallerAndEqual (%p1, %p2){
	%p3 <- %p1 <= 1
	br %p3 :smaller :larger
	:smaller
	return 1
	:larger
	return 0
}
define :printArrayElementByIndex(%array, %index) {
	%index <- call :increaseOne (%index)
	%offest <- 8 * %index
	%addr <- %array + %offest
	%element <- load %addr
	call print(%element)
	return
}
define :getArrayElementByIndex(%array, %index) {
	%index <- call :increaseOne (%index)
	%offest <- 8 * %index
	%addr <- %array + %offest
	%element <- load %addr
	return %element
}
define :printArray (%array) {
	:define
	%is_A1_address <- call :isAddress(%A1)
	br %is_A1_address :is_array_label :not_array_label
	:is_array_label
	%index <- 0
	%length <- load %array
	:loop_start
	%tmp <- %index < %length
	br %tmp :loop_next :loop_end
	:loop_next
	call :printArrayElementByIndex(%array, %index)
	%index <- %index + 1
	br :loop_start
	:loop_end
	:not_array_label
	return
}