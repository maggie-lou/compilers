// this program will check if the given value is prime
// it will print 0 to indicate it compiled successfully
// it will print 0 or 1 before that indicating the status of prime for the given %val
define :main() {
	
	%val <- 10 
	%result <- call :isPrime (%val)

	// print the %result of the function
	%printRes <- call :encode (%result)
	call print (%printRes)

	// on %success
	%success <- call :encode (0)
	call print (%success)
}


define :isPrime(%val) {
	
	%arr <- call allocate(%val, 1)

	%index <- %val - 1

	:start
	%done <- %index <= 2
	br %done :false1
  br :continue

	:continue
	%divisible <- :isDivisible(%val, %index)

	br %divisible :true1
  br :next1
	:next1
	tmpIndex <- %index
	%index <- tmpIndex + 1
	:start

	:false1
		return 0
	:true1
		return 1

}


define :isDivisible(val1, val2){
	
	val1Bigger <- val1 < val2
	equal <- val1 = val2

	br equal :true
  br :notEqual

	:notEqual
	br val1Bigger :val1Bigger
  br :val2Bigger

	:val1Bigger
		steady <- val1
		changer <- val2
		i <- 2
		:ready

	:val2Bigger
		steady <- val2
		changer <- val1
		i <- 2
		:ready

	:ready
		checker <- changer * i

		tooBig <- checker >= steady

		br tooBig :false
    br :allGood

		:allGood

		equality <- checker = steady

		br equality :true
    br :next

	:next
		itmp <- i
		i <- itmp + 1
		:ready


	:false
		return 0

	:true
		return 1
}


define :encode(%val){
	// encode the value
	// used for printing
	%val <- %val << 1
	%val <- %val + 1
	return %val
}
