    define :main () { 
        %len <- call :encode(30)
        %init_v <- call :encode(0)
        %ptr <- call allocate (%len, %init_v)
        %vec_ptr <- %ptr
        %ptr <- %ptr + 8
        %val <- call :encode(1)
        store %ptr <- %val
        %ptr <- %ptr + 8
        %val <- call :encode(2)
        store %ptr <- %val
        %ptr <- %ptr + 8
        %val <- call :encode(3)
        store %ptr <- %val
        %ptr <- %ptr + 8
        %val <- call :encode(4)
        store %ptr <- %val
        %ptr <- %ptr + 8
        %val <- call :encode(5)
        store %ptr <- %val
        %ptr <- %ptr + 8
        %val <- call :encode(1)
        store %ptr <- %val
        %ptr <- %ptr + 8
        %val <- call :encode(2)
        store %ptr <- %val
        %ptr <- %ptr + 8
        %val <- call :encode(3)
        store %ptr <- %val
        %ptr <- %ptr + 8
        %val <- call :encode(4)
        store %ptr <- %val
        %ptr <- %ptr + 8
        %val <- call :encode(5)
        store %ptr <- %val
        %ptr <- %ptr + 8
        %val <- call :encode(1)
        store %ptr <- %val
        %ptr <- %ptr + 8
        %val <- call :encode(2)
        store %ptr <- %val
        %ptr <- %ptr + 8
        %val <- call :encode(3)
        store %ptr <- %val
        %ptr <- %ptr + 8
        %val <- call :encode(4)
        store %ptr <- %val
        %ptr <- %ptr + 8
        %val <- call :encode(5)
        store %ptr <- %val
        %ptr <- %ptr + 8
        %val <- call :encode(1)
        store %ptr <- %val
        %ptr <- %ptr + 8
        %val <- call :encode(2)
        store %ptr <- %val
        %ptr <- %ptr + 8
        %val <- call :encode(3)
        store %ptr <- %val
        %ptr <- %ptr + 8
        %val <- call :encode(4)
        store %ptr <- %val
        %ptr <- %ptr + 8
        %val <- call :encode(5)
        store %ptr <- %val
        %ptr <- %ptr + 8
        %val <- call :encode(1)
        store %ptr <- %val
        %ptr <- %ptr + 8
        %val <- call :encode(2)
        store %ptr <- %val
        %ptr <- %ptr + 8
        %val <- call :encode(3)
        store %ptr <- %val
        %ptr <- %ptr + 8
        %val <- call :encode(4)
        store %ptr <- %val
        %ptr <- %ptr + 8
        %val <- call :encode(5)
        store %ptr <- %val
        %ptr <- %ptr + 8
        %val <- call :encode(1)
        store %ptr <- %val
        %ptr <- %ptr + 8
        %val <- call :encode(2)
        store %ptr <- %val
        %ptr <- %ptr + 8
        %val <- call :encode(3)
        store %ptr <- %val
        %ptr <- %ptr + 8
        %val <- call :encode(4)
        store %ptr <- %val
        %ptr <- %ptr + 8
        %val <- call :encode(5)
        store %ptr <- %val

        call print (%vec_ptr)
        %sum <-call :sum_array(%vec_ptr)
        call print (%sum)
        return
    }

    define :encode(%data) {
        %data <- %data << 1
        %data <- %data + 1
        return %data
    }

    define :sum_array (%ptr) {
        %sum <- 0
        %size <- %mem %ptr 0 //%size of input array

        :loop
        %ptr <- %ptr + 8
        %over <- %size = 0
        br %over :finish
        br :cont

        :cont
        v <- load %ptr
        v_d <- v >> 1
        %sum <- %sum + v_d
        %size <- %size - 1
        br :loop

        :finish
        %sum <- call :encode(%sum)
        return %sum
    }


