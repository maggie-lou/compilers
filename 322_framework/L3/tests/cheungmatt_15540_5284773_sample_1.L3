define :main() {
  arrLen <- 27
  arr <- call allocate (arrLen, 1) 

  // populate arr
  newVar0 <- arr + 8
  store newVar0 <- 7
  newVar1 <- arr + 16
  store newVar1 <- 31
  newVar2 <- arr + 24
  store newVar2 <- 49
  newVar3 <- arr + 32
  store newVar3 <- 1
  newVar4 <- arr + 40
  store newVar4 <- 2
  newVar5 <- arr + 48
  store newVar5 <- 3
  newVar6 <- arr + 56
  store newVar6 <- 4
  newVar7 <- arr + 64
  store newVar7 <- 5
  newVar8 <- arr + 72
  store newVar8 <- 6
  newVar9 <- arr + 80
  store newVar9 <- 7
  newVar10 <- arr + 88
  store newVar10 <- 8
  newVar11 <- arr + 96
  store newVar11 <- 9
  newVar12 <- arr + 104
  store newVar12 <- 10
  
  // print len of arr
  checkLen <- call :arrLen(arr)
  checkLen <- checkLen << 1
  checkLen <- checkLen + 1
  call print(checkLen)

  // print arr
  call :printArr(arr)

  // print reversed arr
  reversed <- call :reverse (arr) 
  call :printArr(reversed)  

  return 
}

// return length of array
define :arrLen (arr) {
  len <- load arr  

  return len
}

// reverse arr
define :reverse (arr) {
  len <- call :arrLen(arr)
  count <- 0

  encodeLen <- len
  encodeLen <- encodeLen << 1
  encodeLen <- encodeLen + 1
  newArr <- call allocate (encodeLen, 0)  

  arrVal <- arr
  newArrVal <- newArr
  offset <- len * 8
  newArrVal <- newArr + offset
  newArrVal <- newArrVal + 8

  :loop
  arrVal <- arrVal + 8
  newArrVal <- newArrVal - 8
  currVal <- load arrVal

  store newArrVal <- currVal 
  count <- count + 1
  cont <- count < len
  br cont :loop :stop
  :stop

  return newArr
}

define :printArr (arr) {
  len <- call :arrLen(arr) 

  count <- 0
  curr <- arr
  :loop
  curr <- curr + 8
  currP <- load curr
  
  currP <- currP << 1
  currP <- currP + 1
  call print(currP)

  count <- count + 1
  cont <- count < len 
  br cont :loop :stop
  :stop

  return
}
