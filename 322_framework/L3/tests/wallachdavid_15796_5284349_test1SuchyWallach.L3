//This program will load a 2-d array with the binary representation of "HELLO", then prints it

define :main (){
	arr <- call allocate (41, 1)
	//call print (1)
	origArr <- arr
	firstLet <- call allocate (21, 1)
	//call print (1)
	//Letter H
	call :fillArray(firstLet, 0, 1, 0, 0, 1, 0, 0, 0)
	call print (61)
	store arr <- firstLet
	arr <- arr + 8
	secondLet <- call allocate (21, 1)
	//Letter E
	call :fillArray(secondLet, 0, 1, 0, 0, 0, 1, 0, 1)
	store arr <- secondLet
	arr <- arr + 8
	thirdLet <- call allocate (21, 1)
	//Letter L
	call :fillArray(thirdLet, 0, 1, 0, 0, 1, 1, 0, 0)
	store arr <- thirdLet
	arr <- arr + 8
	fourthLet <- call allocate (21, 1)
	//Letter L
	call :fillArray(fourthLet, 0, 1, 0, 0, 1, 1, 0, 0)
	store arr <- fourthLet
	arr <- arr + 8
	fifthLet <- call allocate (21, 1)
	//Letter O
	call :fillArray(fifthLet, 0, 1, 0, 0, 1, 1, 1, 1)
	store arr <- fifthLet
	arr <- arr + 8
	sixthLet <- call allocate (21, 1)
	//Letter O
	call :fillArray(sixthLet, 0, 1, 0, 0, 1, 1, 1, 1)
	store arr <- sixthLet
	arr <- arr + 8
	seventhLet <- call allocate (21, 1)
	//Letter O
	call :fillArray(seventhLet, 0, 1, 0, 0, 1, 1, 1, 1)
	store arr <- seventhLet
	arr <- arr + 8

	call :hello (origArr, 7)
	return
}

define :hello (arr, len){
	:loop
		subarr <- load arr
		call :printEntry (subarr)
		arr <- arr + 8
		compare <- len = 0
		br compare :done :preLoop
	:preLoop
		len <- len - 1
		br :loop
	:done
		return
}

define :fillArray(tempArr, zero, one, two, three, four, five, six, seven){
	store tempArr <- zero
	tempArr <- tempArr + 8
	store tempArr <- one
	tempArr <- tempArr + 8
	store tempArr <- two
	tempArr <- tempArr + 8
	store tempArr <- three
	tempArr <- tempArr + 8
	store tempArr <- four
	tempArr <- tempArr + 8
	store tempArr <- five
	tempArr <- tempArr + 8
	store tempArr <- six
	tempArr <- tempArr + 8
	store tempArr <- seven
	call print (15)
	return 
}

define :printEntry(arr){
	printVal <- load arr
	printVal <- call :encode (printVal)
	call print (printVal)
	arr <- arr + 8
	printVal <- load arr
	printVal <- call :encode (printVal)
	call print (printVal)
	arr <- arr + 8
	printVal <- load arr
	printVal <- call :encode (printVal)
	call print (printVal)
	arr <- arr + 8
	printVal <- load arr
	printVal <- call :encode (printVal)
	call print (printVal)
	arr <- arr + 8
	printVal <- load arr
	printVal <- call :encode (printVal)
	call print (printVal)
	arr <- arr + 8
	printVal <- load arr
	printVal <- call :encode (printVal)
	call print (printVal)
	arr <- arr + 8
	printVal <- load arr
	printVal <- call :encode (printVal)
	call print (printVal)
	arr <- arr + 8
	printVal <- load arr
	printVal <- call :encode (printVal)
	call print (printVal)
	return
}

define :encode(val){
	val <- val << 1
	val <- val + 1
	return val
}