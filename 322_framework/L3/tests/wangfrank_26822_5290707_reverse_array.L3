    define :main () { 
        len <- call :encode(30)
        init_v <- call :encode(0)
        ptr <- call allocate (len, init_v)
        vec_ptr <- ptr
        ptr <- ptr + 8
        val <- call :encode(1)
        store ptr <- val
        ptr <- ptr + 8
        val <- call :encode(2)
        store ptr <- val
        ptr <- ptr + 8
        val <- call :encode(3)
        store ptr <- val
        ptr <- ptr + 8
        val <- call :encode(4)
        store ptr <- val
        ptr <- ptr + 8
        val <- call :encode(5)
        store ptr <- val
        ptr <- ptr + 8
        val <- call :encode(1)
        store ptr <- val
        ptr <- ptr + 8
        val <- call :encode(2)
        store ptr <- val
        ptr <- ptr + 8
        val <- call :encode(3)
        store ptr <- val
        ptr <- ptr + 8
        val <- call :encode(4)
        store ptr <- val
        ptr <- ptr + 8
        val <- call :encode(5)
        store ptr <- val
        ptr <- ptr + 8
        val <- call :encode(1)
        store ptr <- val
        ptr <- ptr + 8
        val <- call :encode(2)
        store ptr <- val
        ptr <- ptr + 8
        val <- call :encode(3)
        store ptr <- val
        ptr <- ptr + 8
        val <- call :encode(4)
        store ptr <- val
        ptr <- ptr + 8
        val <- call :encode(5)
        store ptr <- val
        ptr <- ptr + 8
        val <- call :encode(1)
        store ptr <- val
        ptr <- ptr + 8
        val <- call :encode(2)
        store ptr <- val
        ptr <- ptr + 8
        val <- call :encode(3)
        store ptr <- val
        ptr <- ptr + 8
        val <- call :encode(4)
        store ptr <- val
        ptr <- ptr + 8
        val <- call :encode(5)
        store ptr <- val
        ptr <- ptr + 8
        val <- call :encode(1)
        store ptr <- val
        ptr <- ptr + 8
        val <- call :encode(2)
        store ptr <- val
        ptr <- ptr + 8
        val <- call :encode(3)
        store ptr <- val
        ptr <- ptr + 8
        val <- call :encode(4)
        store ptr <- val
        ptr <- ptr + 8
        val <- call :encode(5)
        store ptr <- val
        ptr <- ptr + 8
        val <- call :encode(1)
        store ptr <- val
        ptr <- ptr + 8
        val <- call :encode(2)
        store ptr <- val
        ptr <- ptr + 8
        val <- call :encode(3)
        store ptr <- val
        ptr <- ptr + 8
        val <- call :encode(4)
        store ptr <- val
        ptr <- ptr + 8
        val <- call :encode(5)
        store ptr <- val

        call print (vec_ptr)
        new_vec <-call :reverse_array(vec_ptr)
        call print (new_vec)
        return
    }

    define :encode(data) {
        data <- data << 1
        data <- data + 1
        return data
    }

    define :reverse_array (vec_ptr) {
        size <- mem vec_ptr 0 //size of input array
        size_e <- call :encode(size)

        init_v <- call :encode(1)
        new_vec <- call allocate(size_e, init_v)
        // allocate second array with same size and init with zero
        
        new_ptr <- new_vec
        off <- size * 8
        new_ptr <- new_ptr + off
        ptr <- vec_ptr
        
        :loop
        ptr += 8
        over <- size = 0
        br over :finish :cont

        :cont
        v <- load ptr
        store new_ptr <- v
        size <- size - 1
        new_ptr <- -= 8
        br :loop

        :finish
        return new_vec
    }


