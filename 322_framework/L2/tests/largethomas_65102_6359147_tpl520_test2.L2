(:go
  (:go
    0 0

    rdi <- 21

    mem rsp -8 <- :factorial_ret
    call :factorial 1
    :factorial_ret

    %arr <- rax
    rdi <- %arr
    mem rsp -8 <- :reverse_array_ret
    call :reverse_array 1
    :reverse_array_ret

    rdi <- %arr
    mem rsp -8 <- :print_array_ret
    call :print_array 1
    :print_array_ret

    return
  )

  (:factorial
    1 0

    // allocate array
    %size <- rdi
    rsi <- 1
    call allocate 2
    rcx <- rax

    // init
    %size >>= 1
    rdx <- 0
    r9 <- 0
    r10 <- 1

    :loop
    r11 <- r9
    r9 <- r10
    r10 += r11

    // encode
    r9 <<= 1
    r9 += 1

    r11 @ rcx rdx 8
    mem r11 8 <- r9

    // decode and increment
    r9 >>= 1
    rdx += 1

    cjump rdx < %size :loop

    rax <- rcx
    return
  )

  (:reverse_array
    1 0

    rcx <- rdi
    r10 <- mem rcx 0
    rdx <- rcx
    rdx += 8
    rsi @ rcx r10 8

    :reverse_array_loop

    r10 <- mem rdx 0
    r11 <- mem rsi 0
    mem rdx 0 <- r11
    mem rsi 0 <- r10

    cjump rsi <= rdx :ret

    rdx += 8
    rsi -= 8
    goto :reverse_array_loop

    :ret

    return
  )

  (:print_array
    1 0

    %arr <- rdi
    %counter <- 0

    :print_loop
    %counter += 1
    rdi @ %arr %counter 8
    rdi <- mem rdi 0

    call print 1

    r10 <- mem %arr 0

    cjump %counter < r10 :print_loop

    return
  )
)
