//Geerates the first n catalan numbers 

(:main
	(:main
		0 0
		mem rsp -8 <- :exit_program
		
		//----NUMBER OF CATALAN NUMBERS TO GENERATE (UNENCODED VALUE)-----:
						%num_catalans <- 15
		//---------------------------------------------------------------
		%num_catalans <<= 1 //encode rdi
		%num_catalans++
		rdi <- %num_catalans
		call :find_first_n_catalans 1
		:exit_program
		return
	)
	(:find_first_n_catalans //finds the first n catalans (n >= 1)
		//rdi is n (encoded)
		1 0
		%n <- rdi  
		%n >>= 1 //decode n
		

		%i <- 0
		%curr_catalan <- 1

		:find_first_loop
			cjump %n <= %i :end_find_first_n_catalans //keep looping until !(n <= i), that is while i < n
			%encoded_catalan <- %curr_catalan
			%encoded_catalan <<= 1 //encode to print
			%encoded_catalan++
			rdi <- %encoded_catalan
			call print 1
			mem rsp -8 <- :ret_find_nth
			rdi <- %curr_catalan //put catalan number in rdi to calculate next one
			rsi <- %i
			call :find_nth_catalan 2
			:ret_find_nth
			%curr_catalan <- rax //store catalan number
			%i++ //increase n counter
		goto :find_first_loop


		:end_find_first_n_catalans
		
		return
	)
	(:find_nth_catalan //finds the nth catalan number (unencoded) based off of recurence relation C_n+1 = 2*(2n+1)/n+2 *C_n  
		//rdi is the previous catalan number (unencoded)
		//rsi is n (unencoded)
		2 0
		%previous_catalan <- rdi
		%n <- rsi
		%calculation <- %n //put n in calculation
		%calculation *= 2 //calculation = 2n
		%calculation += 1 //calculation = (2n + 1) 
		%calculation *= 2 //calculation = 2*(2n+1) 
		%calculation *= %previous_catalan // calculation = 2 * (2n+1) * C_n
		
		%n += 2 //n = n+2
		mem rsp -8 <- :ret_divide
		rdi <- %calculation
		rsi <- %n 
		call :divide 2 
		:ret_divide 
		return
	)
	(:divide //divides two positive unencoded integers, returns an unencoded value
		//rdi = numerator
		//rsi = denominator
		2 0
		%result <- 0
		%numer <- rdi
		%denom <- rsi
		:divide_loop
			cjump %numer < %denom :end_divide //if num < denom, end
			%numer -= %denom
			%result++
		goto :divide_loop

		:end_divide
		rax <- %result
		return

	)
)