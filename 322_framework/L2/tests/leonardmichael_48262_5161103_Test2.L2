// Specify rdi at the beginning
// Fill array with increasing uints from 0 to (decoded rdi)
// Except every even index is a 0
// Walk array & print


(:go
 (:go
  1 0
  rdi <- 23
  %original_size <- rdi

  mem rsp -8 <- :populate_ree
  call :populate 1
  :populate_ree
  rdi <- %original_size

  rsi <- rax
  mem rsp -8 <- :print_arr_ree
  call :print_arr 2
  :print_arr_ree

  return
  )

 (:populate
  1 0
  %original_size <- rdi
  %original_size >>= 1 // rdi_save was rbx
  %size <- rdi
  %size >>= 1
  %size <<= 2
  %size += 1
  rdi <- %size
  rsi <- 0 // rdi already contains the %size
  call allocate 2
  %counter <- 0
  %addr <- rax

  :write_val
  %addr += 16 // r9 holds write location
  %encoded_counter <- %counter
  %encoded_counter <<= 1
  %encoded_counter += 1
  r9 <- %addr
  mem r9 0 <- %counter
  %counter += 1
  goto :check_count

  :check_count
  cjump %counter <= %original_size :write_val :out

  :out
  return
  )

 (:print_arr
  2 3
  %size <- rdi
  %size >>= 1
  %size <<= 2
  %size += 1
  mem rsp 0 <- r12
  mem rsp 8 <- %encoded_size
  mem rsp 16 <- r14
  %counter <- 0
  %encoded_size <- %size
  %encoded_size >>= 1
  %encoded_size += 1
  %addr <- rsi

  :print_val
  %addr += 8
  r14 <- %addr
  %size <- mem r14 0
  %size <<= 1
  %size += 1
  rdi <- %size
  call print 1
  %counter += 1
  goto :count

  :count
  cjump %counter <= %encoded_size :print_val :get_out

  :get_out
  r14 <- stack-arg -8
  r13 <- stack-arg -16
  r12 <- stack-arg -24
  return
  )
 )
