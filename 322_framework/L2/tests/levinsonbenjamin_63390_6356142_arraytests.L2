(:main
    (:main
     0 0
     //Setup the number of elements
     %number_elem <- 15
     %init_val <- 1
     rdi <- %number_elem
     rsi <- %init_val

     //allocate the array
     call allocate 2

     //save the ptr to the array
     %ptr <- rax

     //print the initial array
     rdi <- %ptr
     call print 1

     rdi <- %ptr
     rsi <- %number_elem

     mem rsp -8 <- :traverse_and_incr_ret
     call :traverse_and_incr 2
     :traverse_and_incr_ret

     %stopping_pt <- 7      //3 encoded

     //setup for next call
     rdi <- %stopping_pt
     rsi <- %ptr
     mem rsp -8 <- :sum_prior_ret
     call :sum_prior 2

     //print out final output
     :sum_prior_ret
     rdi <- rax
     call print 1
     return

    )

    (:traverse_and_incr
        2 0
        //rdi is pointer to the start
        //rsi is the number of elements (encoded)
        %current <- rdi
        %i <- 0
        :check
            cjump %i <= rsi :loop :end
        :loop
            %current += 8                               //move to next element
            %dereferenced_value <- mem %current 0       //get the value of the element
            %i += 2                                     //increment the counter by 1 encoded
            %dereferenced_value += 2                    //increment the value at the element
            mem %current 0 <- %dereferenced_value       //store the new value back
            goto :check
        :end
        call print 1
        return
    )

    (:sum_prior
        2 0
        //rdi is the index to stop at
        //rsi is the pointer to the array
        %i <- 0 //loop index
        %running_sum <- 1

        :check_sum
            cjump %i <= rdi :loop_sum :end_sum
        :loop_sum
            %addr @ rsi %i 8        //calculate the pointer to the element
            %value <- mem %addr 0
            //decode value as number
            %value >>= 1
            %running_sum += %value
            %i += 2
            goto :check_sum

        :end_sum
            %base <- rsi
            mem %base 24 <- %running_sum
            rdi <- rsi
            call print 1
            rax <- %running_sum
            return
    )
)
