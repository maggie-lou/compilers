// Biraj Parikh
// EECS 322 W19
// Prints an array {s: N, 1, 2, ..., N} and prints the sum afterwards
(:main
	(:main 0 0
		// create array of size N
		%N <- 15 // %N -> N
		rdi <- %N
		rsi <- 1
		call allocate 2
		%curr_arr <- rax // location of array; r13 -> %curr_arr

		// populate array
		%master_arr <- rax // location of array; r14 -> %master_arr
		%counter <- 3 // counter starting at 1; r15 -> %counter
		
		:arr_init_loop
		mem %curr_arr 8 <- %counter
		%curr_arr += 8 // increment to next array position
		%counter += 2 // increment counter
		cjump %counter <= %N :arr_init_loop :calc_sum_and_ret
		:calc_sum_and_ret
		rdi <- %master_arr
		call print 1
		mem rsp -8 <- :sum_arr_ret
		rdi <- %master_arr
		rsi <- %N
		call :sum_arr 2 // calculate the sum of the array
		:sum_arr_ret
		return
	)
	
	(:sum_arr 2 0
		// array at r14, array size at %N
		%cum_sum <- 1 // 0, progressive sum; rbx -> %cum_sum
		%curr_pos <- rdi // store array in r13 -> %curr_pos to iterate through
		%N <- rsi
		%counter <- 1 // r8 -> %counter
		:sum_loop
		%cum_sum += mem %curr_pos 8 // add to sum
		%cum_sum-- // re-encode summed value
		%curr_pos += 8 // go to next array element
		%counter += 2 // increment counter
		cjump %counter < %N :sum_loop :print_and_ret
		:print_and_ret
		rdi <- %cum_sum
		call print 1
		return
	)
)
