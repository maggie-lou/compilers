// fibonacci: compute the nth fibonacci number
// Output: 5 55 30

(:go
	(:go
		0 0
		rdi <- 5
		mem rsp -8 <- :fib_ret1
		call :fib 1
		:fib_ret1
		rdi <- rax
		rdi <<= 1
		rdi ++
		call print 1

		rdi <- 10
		mem rsp -8 <- :fib_ret2
		call :fib 1
		:fib_ret2
		rdi <- rax
		rdi <<= 1
		rdi ++
		call print 1

		mem rsp -8 <- :random_large_func_ret
		mem rsp -16 <- 10
		mem rsp -24 <- 20
		call :random_large_func 8
		:random_large_func_ret
		rdi <- rax
		rdi <<= 1
		rdi ++
		call print 1
		return
	)
	(:fib
		1 0
		%counter <- 0 // counter
		%next <- 1 // next number
		%curr <- 1 // present number
		%prev <- 0 // prev number
		
		:loop
		%next <- %prev
		%next += %curr
		%prev <- %curr
		%curr <- %next
		%counter ++

		:conditional
		cjump %counter < rdi :loop :finish

		:finish
		rax <- %prev 
		return
	)

	(:random_large_func
		8 0
		%prev_r12 <- r12
		r12 <- stack-arg 0
		rax <- stack-arg 8
		rax += r12
		r12 <- %prev_r12
		return
	)
)