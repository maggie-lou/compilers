// encoded mul
// rdi, rsi, rdx, rcx, r8, r9
(:main
 (:encode
  1 0 // rdi = n
  %n <- rdi
  %n <<= 1
  %n += 1
  rax <- %n
  return)
 (:decode
  1 0 // rdi = n
  %n <- rdi
  %n >>= 1
  rax <- %n
  return)
 (:encoded_add
  2 0 // rdi = a, rsi = b
  // optimized version
  %a <- rdi
  %b <- rsi
  %a += %b
  %a -= 1
  rax <- %a
  return)
 (:encoded_sub
  2 0 // rdi = a, rsi = b :: a - b
  // optimized version
  %a <- rdi
  %b <- rsi
  %a -= %b
  %a += 1
  rax <- %a
  return)
 (:encoded_sub1
  1 0 // rdi = x
  rsi <- 3 // encode(1) = 3
  mem rsp -8 <- :encoded_sub1__ret_addr__encoded_sub
  call :encoded_sub 2
  :encoded_sub1__ret_addr__encoded_sub
  return)
 (:encoded_mul_impl
  3 0 // rdi = a, rsi = b, rdx = acc
  :encoded_mul_impl_begin
  %a <- rdi // 12
  %b <- rsi // 13 
  %acc <- rdx // 14

  cjump %a = 1 :encoded_mul_impl__ret0
  cjump %a = 3 :encoded_mul_impl__retacc :encoded_mul_impl__recur

  :encoded_mul_impl__recur
  rdi <- %b
  rsi <- %acc
  mem rsp -8 <- :encoded_mul_impl__ret_addr__encoded_add
  call :encoded_add 2
  :encoded_mul_impl__ret_addr__encoded_add
  %acc <- rax
  rdi <- %a
  mem rsp -8 <- :encoded_mul_impl__ret_addr__encoded_sub1
  call :encoded_sub1 1
  :encoded_mul_impl__ret_addr__encoded_sub1
  rdi <- rax
  rsi <- %b
  rdx <- %acc
  goto :encoded_mul_impl_begin

  :encoded_mul_impl__ret0
  %acc <- 1 // encode(0) = 1

  :encoded_mul_impl__retacc
  rax <- %acc
  return)
 (:encoded_mul
  2 0
  rdx <- rsi
  mem rsp -8 <- :encoded_mul__ret_addr__encoded_mul_impl
  call :encoded_mul_impl 3
  :encoded_mul__ret_addr__encoded_mul_impl
  return)
 (:main
  0 0
  rdi <- 5 // encode(2) = 5
  rsi <- 11 // encode(5) = 11
  mem rsp -8 <- :main__ret_addr__encoded_mul
  call :encoded_mul 2
  :main__ret_addr__encoded_mul
  %mul_res <- rax

  rdi <- %mul_res
  call print 1

  return))
