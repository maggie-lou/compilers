//calculates the first n fibbonaci numbers

(:main
	(:main
		0 0
		//=============NUMBER TO GENERATE (UNENCODED VALUE)===============
				%number_to_generate <- 15
		//===================================================
		
		//encode
		%number_to_generate <<= 1
		%number_to_generate++
		mem rsp -8 <- :ret_main_to_calculate
		rdi <- %number_to_generate
		call :calculate 1
		:ret_main_to_calculate
		%array <- rax
		rdi <- %array
		call print 1
		return

	)
	(:calculate //generates rdi fibbonaci arrays and stores them in an array which it returns
		//rdi -- number to generate (encoded)
		1 0
		%limit <- rdi
		rdi <- %limit
		rsi <- 1
		call allocate 2
		%array <- rax
		
		%limit >>= 1 //decode
		%k0 <- 1
		%k1 <- 0
		%i <- 0
		:loop
			cjump %i < %limit :continue :break
			:continue
			
			//encode and store k1
			%k1 <<= 1
			%k1++
			%curr_array_loc <- 8
			%i++
			%curr_array_loc *= %i
			%i--
			%curr_array_loc += %array

			mem %curr_array_loc 0 <- %k1

			
			//decode k1
			%k1 >>=1

			//calc fibbonaccis
			%temp <- %k1
			%k1 += %k0
			%k0 <- %temp
			
			//increment counter
			%i++
		goto :loop

		:break
		rax <- %array
		return
	)



)