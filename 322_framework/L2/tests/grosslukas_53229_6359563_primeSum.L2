(:go
  (:go 0 0
     rdi <- 10
     rsi <- 100
     mem rsp -8 <- :sum_ret
     call :primeSum 2
   :sum_ret
     rdi <- rax
     rdi <<= 1
     rdi += 1
     call print 1
     return
  )

  (:primeSum 0 0 // Sum of primes from rdi to rsi
     %curr <- rdi
     %end <- rsi
     %sum <- 0
   :loop1
     cjump %end < %curr :done1
     mem rsp -8 <- :is_prime_ret
     rdi <- %curr
     call :is_prime 1
   :is_prime_ret
     cjump rax = 1 :prime
     goto :inc
   :prime
     %sum += %curr
   :inc
     %curr += 1
     goto :loop1

   :done1
     rax <- %sum
     return
  )
  (:is_prime 1 0
     %num <- rdi
     cjump %num = 1 :false
     %count <- 2           // Loop variable (i)
   :loop2
     %square <- %count
     %square *= %square
     cjump %num < %square :true // When i^2 > input
     mem rsp -8 <- :mod_ret
     rdi <- %num
     rsi <- %count
     call :modulo 2
   :mod_ret
     cjump rax = 0 :false  // If input % i == 0, not prime
     %count += 1
     goto :loop2

   :true
     rax <- 1
     goto :done2
   :false
     rax <- 0
     goto :done2
   :done2
     return
  )

  (:modulo 2 0 // rdi % rsi
   :loop3
     cjump rdi < rsi :done3
     rdi -= rsi
     goto :loop3
   :done3
     rax <- rdi
     return
  )
)
